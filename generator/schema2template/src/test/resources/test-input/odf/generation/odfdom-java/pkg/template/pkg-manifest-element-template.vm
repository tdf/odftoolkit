##################################################################
##
## Licensed to the Apache Software Foundation (ASF) under one
## or more contributor license agreements.  See the NOTICE file
## distributed with this work for additional information
## regarding copyright ownership.  The ASF licenses this file
## to you under the Apache License, Version 2.0 (the
## "License"); you may not use this file except in compliance
## with the License.  You may obtain a copy of the License at
##
##  http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing,
## software distributed under the License is distributed on an
## "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
## KIND, either express or implied.  See the License for the
## specific language governing permissions and limitations
## under the License.
##
##################################################################
## Template to create the Java class representing an ODF manifest element
##
#set ($element = ${xmlModel.getElement($contextNode)})
#set ($localName = ${xmlModel.extractLocalName($element)})
#set ($className = "${xmlModel.camelCase($localName)}Element")
##
## Set child element and child attributes
#set ($children = ${element.getChildElements().withoutMultiples()})
#set ($attributes = ${element.getAttributes().withoutMultiples()})
##
#set ($baseClassName = "OdfElement")
##
## Test if this element has mandatory (non optional) attributes
#set ($hasMandatoryAttr = false)
#foreach ($attribute in $attributes)
#if (${element.isMandatory($attribute)})
#set ($hasMandatoryAttr = true)
#set ($mandatoryAttr = $attribute)
#end
#end
##
## Begin Code
#include('copyright.txt')
/*
 * This file is automatically generated.
 * Don't edit manually.
 */
package org.odftoolkit.odfdom.pkg.manifest;

##
## ---------------------------------------------------
##  Imports
## ---------------------------------------------------
##
import org.odftoolkit.odfdom.pkg.OdfPackageNamespace;
import org.odftoolkit.odfdom.pkg.OdfElement;
import org.odftoolkit.odfdom.pkg.OdfFileDom;
import org.odftoolkit.odfdom.pkg.OdfName;
import org.odftoolkit.odfdom.pkg.OdfPackageNamespace;
##
## ---------------------------------------------------
##  Class
## ---------------------------------------------------
##
/**
 * Manifest implementation of OpenDocument element  {@odf.element $element}.
 *
#if (${children.containsName("*")})
#set ($anychild = true)
#else
#set ($anychild = false)## if not explicitly set to false, later condition will be postive :/
#end
#if ($anychild)
 * This class can have any org.w3c.dom.Element child element.
#end
##
#if (${attributes.containsName("*")})
#set ($anyattribute = true)
#else
#set ($anyattribute = false)## if not explicitly set to false, later condition will be postive :/
#end
#if ($anyattribute)
 * This class can have any org.w3c.dom.Attribute attribute.
#end
 */
public class $className extends $baseClassName {

#if (${element.getNamespacePrefix()})
	public static final OdfName ELEMENT_NAME = OdfName.newName(OdfPackageNamespace.${element.getNamespacePrefix().toUpperCase()}, "${element.getLocalName()}");
#else
	public static final OdfName ELEMENT_NAME = OdfName.newName("$localName");
#end

	/**
	 * Create the instance of <code>$className</code>
	 *
	 * @param  ownerDoc     The type is <code>OdfFileDom</code>
	 */
	public $className(OdfFileDom ownerDoc) {
		super(ownerDoc, ELEMENT_NAME);
	}

	/**
	 * Get the element name
	 *
	 * @return  return   <code>OdfName</code> the name of element {@odf.element $element}.
	 */
	@Override
	public OdfName getOdfName() {
		return ELEMENT_NAME;
	}
##
## ---------------------------------------------------
##  Add init method if this element or the base
##  element has mandatory attributes
##  TODO: NO caller use this method.
## ---------------------------------------------------
##
## ---------------------------------------------------
##  Attribute getters and setters
## ---------------------------------------------------
##
#foreach ($attr in $attributes)
#set($attri = ${xmlModel.getAttribute($attr.getQName())})
#set ($valueObject = "String")
#set ($simpleValue = "")
#set ($dataTypes = ${attri.getDatatypes().withoutMultiples()})
#set ($valueTypes = ${codeModel.getValuetypes($dataTypes)})
#foreach ($valueType in $valueTypes)
#set ($valueObject = $valueType)
#end
## use attri get all of the values.
#set($values = ${attri.getValues().withoutMultiples()})
#if ($values.size() ==2 && $dataTypes.size()==0)
#set ($trueFlag = false)
#set ($falseFlag = false)
#foreach ($value in $values)
#if ($value==true)
#set ($trueFlag = true)
#end
#if ($value==false)
#set ($falseFlag = true)
#end
#end
#if ($trueFlag and $falseFlag)
#set ($hasdatatype = true)
#set ($valueObject = "Boolean")
#end
#end
#if ($valueObject != "String" && $valueObject != "Double" && $valueObject != "Integer" && $valueObject != "Boolean")
#set ($valueObject = "String")
#end
#if ($valueObject != "String")
#set ($simpleValue = ${codeModel.getPrimitiveType($valueObject)})
#end
#if ($attr != "*")
#set ($attribute = ${attr.withMultiples()})
#set ($aClassName = "${xmlModel.camelCase(${attribute.getLocalName()})}Attribute")
#set ($aParam = "${xmlModel.javaCase(${attribute.getLocalName()})}Value")

	/**
	 * Receives the value of the ODFDOM attribute representation <code>$aClassName</code> , See {@odf.attribute ${attribute}}
	 *
#if (${element.isMandatory($attribute)})
	 * Attribute is mandatory.
	 *
#end
	 * @return - the <code>$valueObject</code> , the value or <code>null</code>, if the attribute is not set and no default value defined.
	 */
	public $valueObject get${aClassName}() {
		$aClassName attr = ($aClassName) getOdfAttribute(${aClassName}.ATTRIBUTE_NAME);
		if (attr != null) {
#if ($simpleValue!="")
			return ${valueObject}.valueOf(attr.${simpleValue}Value());
#else
			return ${valueObject}.valueOf(attr.getValue());
#end
		}
#if ($odfModel.getDefaultAttributeValue($attribute, $element))
#set ($defaultValue = ${xmlModel.escapeLiteral($odfModel.getDefaultAttributeValue($attribute, $element))})
#set ($defaultValueSet = $odfModel.getDefaultAttributeValues($attribute))
#if ($defaultValueSet.size()>1)
#set ($constant = $xmlModel.constantCase($defaultValue))
#if ($valueObject == "String")
		return ${aClassName}.DEFAULT_VALUE_${xmlModel.escapeKeyword($constant)};
#else
		return ${valueObject}.valueOf(${aClassName}.DEFAULT_VALUE_${xmlModel.escapeKeyword($constant)});
#end
#else
#if ($valueObject == "String")
		return ${aClassName}.DEFAULT_VALUE;
#else
		return ${valueObject}.valueOf(${aClassName}.DEFAULT_VALUE);
#end
#end
#else
		return null;
#end
	}

	/**
	 * Sets the value of ODFDOM attribute representation <code>$aClassName</code> , See {@odf.attribute ${attribute}}
	 *
	 * @param $aParam   The type is <code>$valueObject</code>
	 */
	public void set${aClassName}($valueObject $aParam) {
		$aClassName attr = new ${aClassName}((OdfFileDom) this.ownerDocument);
		setOdfAttribute(attr);
#if ($valueObject == "String")
		attr.setValue($aParam);
#else
		attr.set${xmlModel.camelCase($simpleValue)}Value($aParam.${simpleValue}Value());
#end
	}
#end
#end

##
## ---------------------------------------------------
##  Methods for child element creation
## ---------------------------------------------------
##
#foreach($ch in $children)
#if ($ch != "*")
#set ($child = ${ch.withMultiples()})
#set ($cClassName = "${xmlModel.camelCase(${child.getLocalName()})}Element")
#set ($cVar = ${xmlModel.javaCase(${child.getLocalName()})})
#set ($ch_attributes = ${child.getAttributes().withoutMultiples()})
##set has parameter flag
#set ($hasParams = false)
#foreach ($ch_attribute in $ch_attributes)
#if (${child.isMandatory($ch_attribute)})
#set ($hasParams = true)
#end
#end
#if ($hasParams)
	/**
	 * Create child element {@odf.element ${child}}.
	 *
#set ($seperateFlag="")
#set ($params="")
#foreach ($ch_attr in $ch_attributes)
#if (${child.isMandatory($ch_attr)})
#set($ch_attri = ${xmlModel.getAttribute($ch_attr.getQName())})
#set ($ch_ValueObject = "String")
#set ($ch_SimpleValue = "")
#set ($ch_DataTypes = ${ch_attri.getDatatypes().withoutMultiples()})
#set ($ch_ValueTypes = ${codeModel.getValuetypes($ch_DataTypes)})
#foreach ($ch_ValueType in $ch_ValueTypes)
#set ($ch_ValueObject = $ch_ValueType)
#end
## use ch_attri get all of the values.
#set($ch_Values = ${ch_attri.getValues().withoutMultiples()})
#if ($ch_Values.size() ==2 && $ch_DataTypes.size()==0)
#set ($trueFlag = false)
#set ($falseFlag = false)
#foreach ($ch_Value in $ch_Values)
#if ($ch_Value==true)
#set ($trueFlag = true)
#end
#if ($ch_Value==false)
#set ($falseFlag = true)
#end
#end
#if ($trueFlag and $falseFlag)
#set ($ch_Hasdatatype = true)
#set ($ch_ValueObject = "Boolean")
#end
#end
#if ($ch_ValueObject != "String" && $ch_ValueObject != "Double" && $ch_ValueObject != "Integer" && $ch_ValueObject != "Boolean")
#set ($ch_ValueObject = "String")
#end
#if ($ch_ValueObject != "String")
#set ($ch_SimpleValue = ${codeModel.getPrimitiveType($ch_ValueObject)})
#end
#if ($ch_attr != "*")
#set ($attribute = ${ch_attr.withMultiples()})
#set ($aClassName = "${xmlModel.camelCase(${attribute.getLocalName()})}Attribute")
#set ($aParam = "${xmlModel.javaCase(${attribute.getLocalName()})}Value")
	 * @param $aParam  the <code>$ch_ValueObject</code> value of <code>$aClassName</code>, see {@odf.attribute  ${attribute}} at specification
#if ($ch_SimpleValue!="")
#set ($params="${params}${seperateFlag}${ch_SimpleValue} ${aParam}")
#else
#set ($params="${params}${seperateFlag}${ch_ValueObject} ${aParam}")
#end
#set ($seperateFlag=", ")
#end
#end
#end
### VERSION:ODF-ELEMENT - START
## Compare element from old and new Spec. A direct comparison is not possible (both encapsulate different RelaxNG Expressions)
## but we can compare by name
#if ( !$xmlModelHistory)
## First possible version the node was added is the current version
#set ($newestVersion = ${xmlModel.getGrammarVersion()})
#foreach( $oldModel in $xmlModelHistory )
#set ($oldElement = ${oldModel.getElement($contextNode)})
#if (!$oldElement || !${oldElement.getChildElements().containsName($child)})
	 * Child element was added in ODF ${newestVersion}
	 *
#break
#end
## Remember this old version as the version the node might be added
#set ($newestVersion = ${oldModel.getGrammarVersion()})
#end
#end
### VERSION:ODF-ELEMENT - END
#if (${element.isMandatory($child)})
	 * Child element is mandatory.
	 *
#end
	 * @return the element {@odf.element $child}
	 */
	 public $cClassName new${cClassName}($params) {
		$cClassName $cVar = ((OdfFileDom) this.ownerDocument).newOdfElement(${cClassName}.class);
#foreach ($ch_attr in $ch_attributes)
#if ($ch_attr != "*" && ${child.isMandatory($ch_attr)})
#set ($aClassName = "${xmlModel.camelCase(${ch_attr.getLocalName()})}Attribute")
#set ($aParam = "${xmlModel.javaCase(${ch_attr.getLocalName()})}Value")
		${cVar}.set$aClassName($aParam);
#end
#end
		this.appendChild($cVar);
		return $cVar;
	}

#else
	/**
	 * Create child element {@odf.element $child}.
	 *
### VERSION:ODF-ELEMENT - START
## Compare element from old and new Spec. A direct comparison is not possible (both encapsulate different RelaxNG Expressions)
## but we can compare by name
#if ( !$xmlModelHistory)
## First possible version the node was added is the current version
#set ($newestVersion = ${xmlModel.getGrammarVersion()})
#foreach( $oldModel in $xmlModelHistory )
#set ($oldElement = ${oldModel.getElement($contextNode)})
#if (!$oldElement || !${oldElement.getChildElements().containsName($child)})
	 * Child element was added in ODF ${newestVersion}
	 *
#break
#end
## Remember this old version as the version the node might be added
#set ($newestVersion = ${oldModel.getGrammarVersion()})
#end
#end
### VERSION:ODF-ELEMENT - END
#if (${element.isMandatory($child)})
	 * Child element is mandatory.
	 *
#end
	 * @return the element {@odf.element ${child}}
	 */
	public $cClassName new${cClassName}() {
		$cClassName $cVar = ((OdfFileDom) this.ownerDocument).newOdfElement(${cClassName}.class);
		this.appendChild($cVar);
		return $cVar;
	}

#end
#end
#end
##
## -----------------------------------------------------
##  New: newTextNode
## -----------------------------------------------------
##
#if ($element.canHaveText())
	/**
	 * Add text content. Only elements which are allowed to have text content offer this method.
	 */
	 public void newTextNode(String content) {
		if (content != null && !content.isEmpty()) {
			this.appendChild(this.getOwnerDocument().createTextNode(content));
		}
	 }
#end
}
