## see https://velocity.apache.org/engine/2.3/user-guide.html#velocimacros
## For highlighting use VisualStudioCode plugin - https://marketplace.visualstudio.com/items?itemName=Quidgest.vscode-velocity
## Using .vm file suffix instead of .vtl suffix for the above plugin
##
##
## Addes the functionality of ODF repetition
#macro( add_repeated_methods $elementClassName $repetitionAttribute)
#set ($attrClassName = "${xmlModel.camelCase($repetitionAttribute)}Attribute")
#set ($attrNamespacePrefix = ${repetitionAttribute.getNamespacePrefix()})

@Override
  /** @return the repeation of this element, the default is in ODF always 1 */
  public int getRepetition() {
    Integer repeated = get${attrClassName}();
    if (repeated == null) {
      repeated = 1;
    }
    return repeated;
  }

  @Override
  /** @return if this element is repeatable, by having a repeatable attribute */
  public boolean isRepeatable() {
    return true;
  }

  @Override
  /** @repetition the repetition number of this attribute */
  public void setRepetition(int repetition) {
    set${attrClassName}(repetition);
  }

  /**
   * Splitting the element at the given position into two halves
   *
   * @param posStart The split position. Counting is starting with zero. The start of the second
   *     half.
   * @return the new created second element (or if posStart was less than 1 the original element)
   */
  @Override
  public ${elementClassName} split(int posStart) {
    ${elementClassName} newElement = this;
    // 0 would not leave anything left on the left side, would not change anything!
    if (posStart > 0) {
      newElement = (${elementClassName}) this.cloneNode(true);
      int repeated = get${attrClassName}();
      if (repeated > 1) {
        if (posStart > 1) {
          this.set${attrClassName}(posStart);
        } else {

          this.removeAttributeNS(OdfDocumentNamespace.${attrNamespacePrefix.toUpperCase()}.getUri(), "${repetitionAttribute.getLocalName()}");
        }
        // any higher value one for repeated write out.
        // 1 is the default and has not to be written out
        if (repeated - posStart > 1) {
          newElement.set${attrClassName}(repeated - posStart);
        } else {
          newElement.removeAttributeNS(OdfDocumentNamespace.${attrNamespacePrefix.toUpperCase()}.getUri(), "${repetitionAttribute.getLocalName()}");
        }
      }
      Node nextNodeSibling = this.getNextSibling();
      OdfElement parent = (OdfElement) this.getParentNode();
      if (nextNodeSibling == null) {
        parent.appendChild(newElement);
      } else {
        parent.insertBefore(newElement, nextNodeSibling);
      }
    }
    return newElement;
  }
#end
## Add is Component Root functionality
#macro( add_isComponentRoot_method )

##  /**
##  * Marks this element as the root of a semantic component known to the user.
##  */
  @Override
  public boolean isComponentRoot() {
    return true;
  }
#end
## Add special split funcationality for ParagraphBase
#macro( add_paragraphBase_split_method )

  /**
   * Splitting the element at the given position into two halves
   *
   * <p>If the paragraph does have an automatic style with a master-page, which results into a page
   * break before the paragraph, this page break will be removed for the new second half. For
   * paragraph containing template styles the follow-up style should be chosen.
   *
   * @param posStart The logical position of the first character (or other paragraph child
   *     component) that will be moved to the beginning of the new paragraph.
   * @return the new created second text container
   */
  @Override
  public OdfElement split(int posStart) {
    TextParagraphElementBase newSecondElement = (TextParagraphElementBase) super.split(posStart);
    OdfStyle autoStyle = newSecondElement.getAutomaticStyle();

    if (autoStyle != null) {
      OdfStylePropertiesBase paragraphProps =
          autoStyle.getPropertiesElement(OdfStylePropertiesSet.ParagraphProperties);
      if (autoStyle.getStyleMasterPageNameAttribute() != null || paragraphProps != null) {
        StyleStyleElement newStyle = newSecondElement.getOrCreateUnqiueAutomaticStyle();
        if (autoStyle.getStyleMasterPageNameAttribute() != null) {
          newStyle.removeAttributeNS(OdfDocumentNamespace.STYLE.getUri(), "master-page-name");
        }
        // overwrite the paragraph properties from the source one, with the cloned element's
        paragraphProps = newStyle.getPropertiesElement(OdfStylePropertiesSet.ParagraphProperties);
        // no paragraph page break should be inherited
        if (paragraphProps != null) {
          paragraphProps.removeAttributeNS(OdfDocumentNamespace.FO.getUri(), "break-before");
          paragraphProps.removeAttributeNS(OdfDocumentNamespace.FO.getUri(), "break-after");
        }
      }
    }
    return newSecondElement;
  }
#end
## Removes all the content from the element (typically cell, which holds content by attribute)
#macro( add_removeContent_method)

  /** Removes all the content from the element */
  @Override
  public void removeContent() {
    super.removeContent();
    this.removeAttributeNS(OdfDocumentNamespace.OFFICE.getUri(), "value");
    this.removeAttributeNS(OdfDocumentNamespace.OFFICE.getUri(), "value-type");
    this.removeAttributeNS(OdfDocumentNamespace.OFFICE.getUri(), "time-value");
    this.removeAttributeNS(OdfDocumentNamespace.OFFICE.getUri(), "date-value");
    this.removeAttributeNS(OdfDocumentNamespace.OFFICE.getUri(), "boolean-value");
    this.removeAttributeNS("urn:org:documentfoundation:names:experimental:calc:xmlns:calcext:1.0", "value-type");
    this.removeAttributeNS(OdfDocumentNamespace.TABLE.getUri(), "formula");
  }
#end
## Add table cell border helper functionality
#macro( add_tableCellHelper_methods )
#include('java-odfdom-table-cell-helper.txt')
#end

