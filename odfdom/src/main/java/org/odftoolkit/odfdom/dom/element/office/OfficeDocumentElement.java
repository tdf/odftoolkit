/**
 * **********************************************************************
 *
 * <p>DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER
 *
 * <p>Copyright 2008, 2010 Oracle and/or its affiliates. All rights reserved.
 *
 * <p>Use is subject to license terms.
 *
 * <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
 * except in compliance with the License. You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0. You can also obtain a copy of the License at
 * http://odftoolkit.org/docs/license.txt
 *
 * <p>Unless required by applicable law or agreed to in writing, software distributed under the
 * License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied.
 *
 * <p>See the License for the specific language governing permissions and limitations under the
 * License.
 *
 * <p>**********************************************************************
 */

/*
 * This file is automatically generated.
 * Don't edit manually.
 */
package org.odftoolkit.odfdom.dom.element.office;

import org.odftoolkit.odfdom.dom.DefaultElementVisitor;
import org.odftoolkit.odfdom.dom.OdfDocumentNamespace;
import org.odftoolkit.odfdom.dom.attribute.grddl.GrddlTransformationAttribute;
import org.odftoolkit.odfdom.dom.attribute.office.OfficeMimetypeAttribute;
import org.odftoolkit.odfdom.dom.attribute.office.OfficeVersionAttribute;
import org.odftoolkit.odfdom.pkg.ElementVisitor;
import org.odftoolkit.odfdom.pkg.OdfElement;
import org.odftoolkit.odfdom.pkg.OdfFileDom;
import org.odftoolkit.odfdom.pkg.OdfName;

/** DOM implementation of OpenDocument element {@odf.element office:document}. */
public class OfficeDocumentElement extends OdfElement {

  public static final OdfName ELEMENT_NAME =
      OdfName.newName(OdfDocumentNamespace.OFFICE, "document");

  /**
   * Create the instance of <code>OfficeDocumentElement</code>
   *
   * @param ownerDoc The type is <code>OdfFileDom</code>
   */
  public OfficeDocumentElement(OdfFileDom ownerDoc) {
    super(ownerDoc, ELEMENT_NAME);
  }

  /**
   * Get the element name
   *
   * @return return <code>OdfName</code> the name of element {@odf.element office:document}.
   */
  public OdfName getOdfName() {
    return ELEMENT_NAME;
  }

  /**
   * Receives the value of the ODFDOM attribute representation <code>GrddlTransformationAttribute
   * </code> , See {@odf.attribute grddl:transformation}
   *
   * @return - the <code>String</code> , the value or <code>null</code>, if the attribute is not set
   *     and no default value defined.
   */
  public String getGrddlTransformationAttribute() {
    GrddlTransformationAttribute attr =
        (GrddlTransformationAttribute)
            getOdfAttribute(OdfDocumentNamespace.GRDDL, "transformation");
    if (attr != null) {
      return String.valueOf(attr.getValue());
    }
    return null;
  }

  /**
   * Sets the value of ODFDOM attribute representation <code>GrddlTransformationAttribute</code> ,
   * See {@odf.attribute grddl:transformation}
   *
   * @param grddlTransformationValue The type is <code>String</code>
   */
  public void setGrddlTransformationAttribute(String grddlTransformationValue) {
    GrddlTransformationAttribute attr =
        new GrddlTransformationAttribute((OdfFileDom) this.ownerDocument);
    setOdfAttribute(attr);
    attr.setValue(grddlTransformationValue);
  }

  /**
   * Receives the value of the ODFDOM attribute representation <code>OfficeMimetypeAttribute</code>
   * , See {@odf.attribute office:mimetype}
   *
   * <p>Attribute is mandatory.
   *
   * @return - the <code>String</code> , the value or <code>null</code>, if the attribute is not set
   *     and no default value defined.
   */
  public String getOfficeMimetypeAttribute() {
    OfficeMimetypeAttribute attr =
        (OfficeMimetypeAttribute) getOdfAttribute(OdfDocumentNamespace.OFFICE, "mimetype");
    if (attr != null) {
      return String.valueOf(attr.getValue());
    }
    return null;
  }

  /**
   * Sets the value of ODFDOM attribute representation <code>OfficeMimetypeAttribute</code> , See
   * {@odf.attribute office:mimetype}
   *
   * @param officeMimetypeValue The type is <code>String</code>
   */
  public void setOfficeMimetypeAttribute(String officeMimetypeValue) {
    OfficeMimetypeAttribute attr = new OfficeMimetypeAttribute((OdfFileDom) this.ownerDocument);
    setOdfAttribute(attr);
    attr.setValue(officeMimetypeValue);
  }

  /**
   * Receives the value of the ODFDOM attribute representation <code>OfficeVersionAttribute</code> ,
   * See {@odf.attribute office:version}
   *
   * <p>Attribute is mandatory.
   *
   * @return - the <code>String</code> , the value or <code>null</code>, if the attribute is not set
   *     and no default value defined.
   */
  public String getOfficeVersionAttribute() {
    OfficeVersionAttribute attr =
        (OfficeVersionAttribute) getOdfAttribute(OdfDocumentNamespace.OFFICE, "version");
    if (attr != null) {
      return String.valueOf(attr.getValue());
    }
    return null;
  }

  /**
   * Sets the value of ODFDOM attribute representation <code>OfficeVersionAttribute</code> , See
   * {@odf.attribute office:version}
   *
   * @param officeVersionValue The type is <code>String</code>
   */
  public void setOfficeVersionAttribute(String officeVersionValue) {
    OfficeVersionAttribute attr = new OfficeVersionAttribute((OdfFileDom) this.ownerDocument);
    setOdfAttribute(attr);
    attr.setValue(officeVersionValue);
  }

  /**
   * Create child element {@odf.element office:automatic-styles}.
   *
   * @return the element {@odf.element office:automatic-styles}
   */
  public OfficeAutomaticStylesElement newOfficeAutomaticStylesElement() {
    OfficeAutomaticStylesElement officeAutomaticStyles =
        ((OdfFileDom) this.ownerDocument).newOdfElement(OfficeAutomaticStylesElement.class);
    this.appendChild(officeAutomaticStyles);
    return officeAutomaticStyles;
  }

  /**
   * Create child element {@odf.element office:body}.
   *
   * <p>Child element is mandatory.
   *
   * @return the element {@odf.element office:body}
   */
  public OfficeBodyElement newOfficeBodyElement() {
    OfficeBodyElement officeBody =
        ((OdfFileDom) this.ownerDocument).newOdfElement(OfficeBodyElement.class);
    this.appendChild(officeBody);
    return officeBody;
  }

  /**
   * Create child element {@odf.element office:font-face-decls}.
   *
   * @return the element {@odf.element office:font-face-decls}
   */
  public OfficeFontFaceDeclsElement newOfficeFontFaceDeclsElement() {
    OfficeFontFaceDeclsElement officeFontFaceDecls =
        ((OdfFileDom) this.ownerDocument).newOdfElement(OfficeFontFaceDeclsElement.class);
    this.appendChild(officeFontFaceDecls);
    return officeFontFaceDecls;
  }

  /**
   * Create child element {@odf.element office:master-styles}.
   *
   * @return the element {@odf.element office:master-styles}
   */
  public OfficeMasterStylesElement newOfficeMasterStylesElement() {
    OfficeMasterStylesElement officeMasterStyles =
        ((OdfFileDom) this.ownerDocument).newOdfElement(OfficeMasterStylesElement.class);
    this.appendChild(officeMasterStyles);
    return officeMasterStyles;
  }

  /**
   * Create child element {@odf.element office:meta}.
   *
   * @return the element {@odf.element office:meta}
   */
  public OfficeMetaElement newOfficeMetaElement() {
    OfficeMetaElement officeMeta =
        ((OdfFileDom) this.ownerDocument).newOdfElement(OfficeMetaElement.class);
    this.appendChild(officeMeta);
    return officeMeta;
  }

  /**
   * Create child element {@odf.element office:scripts}.
   *
   * @return the element {@odf.element office:scripts}
   */
  public OfficeScriptsElement newOfficeScriptsElement() {
    OfficeScriptsElement officeScripts =
        ((OdfFileDom) this.ownerDocument).newOdfElement(OfficeScriptsElement.class);
    this.appendChild(officeScripts);
    return officeScripts;
  }

  /**
   * Create child element {@odf.element office:settings}.
   *
   * @return the element {@odf.element office:settings}
   */
  public OfficeSettingsElement newOfficeSettingsElement() {
    OfficeSettingsElement officeSettings =
        ((OdfFileDom) this.ownerDocument).newOdfElement(OfficeSettingsElement.class);
    this.appendChild(officeSettings);
    return officeSettings;
  }

  /**
   * Create child element {@odf.element office:styles}.
   *
   * @return the element {@odf.element office:styles}
   */
  public OfficeStylesElement newOfficeStylesElement() {
    OfficeStylesElement officeStyles =
        ((OdfFileDom) this.ownerDocument).newOdfElement(OfficeStylesElement.class);
    this.appendChild(officeStyles);
    return officeStyles;
  }

  /**
   * Accept an visitor instance to allow the visitor to do some operations. Refer to visitor design
   * pattern to get a better understanding.
   *
   * @param visitor an instance of DefaultElementVisitor
   */
  @Override
  public void accept(ElementVisitor visitor) {
    if (visitor instanceof DefaultElementVisitor) {
      DefaultElementVisitor defaultVisitor = (DefaultElementVisitor) visitor;
      defaultVisitor.visit(this);
    } else {
      visitor.visit(this);
    }
  }
}
