# Website Development

## Introduction

The pages on this website are written in [markdown syntax] [1] and stored in our GIT repo at
[src/site] [2]

A subproject contained within the repo is used to generate the website from the Markdown text
files and the resources stored in the content directory.

This Java solution is meant as an interim solution as we do not want to reinvent the wheel.
Instead we are likely switching to [Sphinx](https://www.zverovich.net/2016/06/16/rst-vs-markdown.html).

## Overview

This website development page is divided into:

* [Setup](#setup) - How to download the website and setup the tooling.
* [Directory Layout](#directory-layout) - Where to find the content and scripts.
* [Local Development](#local-development) - How to build and test locally.
* [Submitting Your Results](#submitting-your-results) - How to contribute your edits.

## Setup

### Download the repo

1. Check out the repository:

```shell
git clone https://github.com/tdf/odftoolkit
```

2. Install Gradle build system, see https://gradle.org/install/

3. Build the project:

```shell
cd odftoolkit/src/site/java
./build-html.sh
```

## Directory Layout

### Content directory

The `src/site/site/content/odftoolkit` directory contains web content - markdown, html, javascript, css, images and other files.
Resources such as images, CSS files and ZIP files are copied as is to the web site during the build.

## Local Development

### Edit the site

Using your favorite editors edit the site content.

### Build the site

Run this to generate the website into GitHub Pages directory <ODFTOOLKIT_ROOT>/docs

```shell
cd odftoolkit/src/site/java
./build-html.sh
```

### Testing your results

Use your GitHub Pages on your GitHub fork using your Git branch and /docs as root!
Use a broken link checker (e.g. https://www.drlinkcheck.com/) testing on your GitHub HTML deployment!

## Building JavaDoc and publishing the JavaDoc

JavaDoc is generated as part of by calling from the root of the project the command:

```shell
mvn install
```
Run `copy-javadoc.sh` to build & copy the created API directories into the <ODFTOOLKIT_ROOT>/docs/api directory and remove any prior files within.

```shell
(cd src/site && ./copy-javadoc.sh)
```

## Submitting your results

### Committer

Do the appropriate combination of git status, git add, and git commits.

### Contributor

For further information see the [GitHub help on creating a pull request from a fork][3] page.

[1]: https://www.apache.org/dev/cmsref.html#markdown
[2]: https://github.com/tdf/odftoolkit/tree/master/src/site
[3]: https://help.github.com/en/articles/creating-a-pull-request-from-a-fork
